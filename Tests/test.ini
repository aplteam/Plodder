; Notes:
; * You may use "<INIFILE>" in any path in order to refer to the folder this log files lives in.
; * You may use "<TEMP>" in any path in order to refer to the temp folder of the current OS

; We now define local variables that can be referenced in the sections as, say, {foo}
home    = '<INIFILE>/'                   
temp    = '<TEMP>/Plodder-Test-Server/' 

[CONFIG]
AppName             = 'Plodder-Test-Server'
LetsCrash           = 0                 ; Should always be 0 except for testing crash handling
DisplayRequests     = 0                 ; 1 makes Rumba display every request in a ⎕ED windows. For debugging only of course.
LogHTTPToSession    = 0
MaxNoOfThreads      = 1000
Port                = 8090
Secure              = 0
HTDOCS              = '{home}HTDOCS/'   ; Becomes global G.HTDOCS: folder with static documents

[LOGGING]
Folder              = '{temp}Logs/'     ; Where the log file goes
Log                 = 0                 ; In production this will most likely be 1 and for sure the others 0.
LogHTTP             = 1
LogConga            = 1 
LogRumba            = 1
WindowsEventLog     = ¯1                ; Windows only! ¯1=Write Start/Stop/Error events to Windows Event Log in Runtime; 1=always ; 0=Never

[CERTIFICATES]
PublicCertFile      = './Assets/Runtime/Certificates/myserver-cert.pem'
PrivateKeyFile      = './Assets/Runtime/Certificates/myserver-key.pem'
CertType            = 'DER'

[EVENTS]
; These are events used by Rumba to quit ⎕DQ or to broadcasts events (pause, continue)
QuitEvent           = 9876
PauseEvent          = 9877
ContinueEvent       = 9878

[RIDE]
active              = 0
port                = 4502
address             = '*'           
wait                = 0             ; If 1 wait for the user in an endless loop

[TRAP]
Folder              = '{temp}Errors/'   ; Where error information goes.
Policy              = 1                 ; ¯1 = Error trapping in Runtime but not otherwise. 1 = Trap; 0 = do not trap. General means "above" Rumba
Rumba               = 1                 ; This has an effect only in development. Rumba traps all errors in Runtime in any case.

[APP]
Context             = '#.Plodder.Plodder.SampleApp'     ; Where in the workspace does the APP live?  (Ideally outside Plodder)
OnStart             = 'OnStart'                         ; Once called when the server starts
OnRequest           = 'OnRequest'                       ; Called in the event of every request
OnCongaTimeout      = 'OnHouseKeeping'                  ; Do any housekeeping here
OnHeader            = 'OnHeader'                        ; Especially useful for handling "Expect" with value "100-continue"