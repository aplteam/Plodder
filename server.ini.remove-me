; Note: you can use "<LOGFILE>" in any path in order to refer to the folder this log files lives in
home                = '<INIFILE>/'

[CONFIG]
AppName             = 'Plodder'
DisplayRequests     = 0             ; 1 makes Rumba display every request in a ⎕ED windows. For debugging only of course.
Folder              = './data'      
LogHTTPToSession    = 0             ; Naturally only useful in development
MaxNoOfThreads      = 1000
Port                = 80
Secure              = 0
HTDOCS              = '{home}'      ; Becomes global G.HTDOCS: folder with static documents

[LOGGING]
LogHTTP             = 1
LogConga            = 1 
LogRumba            = 1

[WINDOWSEVENTLOG]
write               = ¯1            ; ¯1 = Write Start/Stop/Error events to Windows Event Log under Windows in Runtime; 1: write under Windows; 0=Never

[CERTIFICATES]                      ; The following settings are ignored in case CONFIG.Secure is 0
PublicCertFile      = './Assets/RunTime/Certificates/myserver-cert.pem'
PrivateKeyFile      = './Assets/RunTime/Certificates/myserver-key.pem'
CertType            = 'DER'

[EVENTS]                            ; These are events used by Rumba to quit ⎕DQ or to broadcasts events ("Pause" and "Continue" when running as a Windows Service)
QuitEvent           = 9876
PauseEvent          = 9877
ContinueEvent       = 9878

[TRAP]
General             = ¯1        ; ¯1 = Error trapping in RunTime but not otherwise. 1 = Trap; 0 = do not trap. General means "above" Rumba
Rumba               = 1         ; This has an effect only in development. Rumba traps all errors in RunTime in any case.

[APP]                                                   ; Change the following settings according to your needs:
Context             = '#.Plodder.SampleApp'            ; Where in the workspace does the application live?  (Ideally outside Plodder)
OnStart             = 'OnStart'                        ; Once called when the server starts
OnHeader            = 'OnHeader'                       ; Especially useful for handling "Expect" with value "100-continue"
OnRequest           = 'OnRequest'                      ; Called in the event of a request. Setting this is mandatory
OnCongaTimeout      = 'OnHouseKeeping'                 ; Do any housekeeping here