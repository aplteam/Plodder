 parms←CreateServerParms G;x509
 parms←R.NewServer 0
 parms.Context←⊃G.INI.Get'APP:Context'
 parms.DisplayRequests←G.INI.Get'CONFIG:DisplayRequests'
 parms.LogHTTPToSession←G.INI.Get'CONFIG:LogHTTPToSession'
 parms.MaxNoOfThreads←G.INI.Get'CONFIG:MaxNoOfThreads'
 parms.Name←G.AppName
 parms.OnStart←⊃''G.INI.Get'APP:OnStart'
 parms.OnHeader←⊃''G.INI.Get'APP:OnHeader'
 parms.OnRequest←⊃G.INI.Get'APP:OnRequest'
 parms.OnCongaTimeout←⊃''G.INI.Get'APP:OnCongaTimeOut'
 parms.Secure←G.INI.Get'CONFIG:Secure'
 :If 0=parms.Port←G.INI.Get'CONFIG:Port'
     parms.Port←(1+parms.Secure)⊃80 443  ⍝ 0 is translated into default port which depends on "Secure"
 :EndIf
 :If parms.Secure
     ⍝TODO                                                                  ⍝ We need a proper certificate here!
     parms.PublicCertFile←'expand'F.NormalizePath⊃G.INI.Get'CERTIFICATES:PublicCertFile'
     parms.PrivateKeyFile←'expand'F.NormalizePath⊃G.INI.Get'CERTIFICATES:PrivateKeyFile'
     parms.CertType←⊃G.INI.Get'CERTIFICATES:CertType'
     parms.TLSFlag←32
 :EndIf
 parms.Trap←G.INI.Get'TRAP:Rumba'
 G.QuitEvent←G.INI.Get'EVENTS:QuitEvent'
 G.PauseEvent←G.INI.Get'EVENTS:PauseEvent'
 G.ContinueEvent←G.INI.Get'EVENTS:ContinueEvent'
 :If ¯1≡G.INI.Get'LOGGING:WindowsEventLog'
     :If G.IsWin
         G.WriteToWindowsEventLog←IsRunningAsService                        ⍝ Default for a Windows Service is "yes"
     :Else
         G.WriteToWindowsEventLog←0                                         ⍝ Never on non-Windows platforms
     :EndIf
 :Else
     G.WriteToWindowsEventLog←G.IsWin×G.INI.Get'LOGGING:WindowsEventLog'    ⍝ Take INI entry on Windows and ignore otherwise
 :EndIf
 parms.Log←G.INI.Get'LOGGING:Log'
 parms.LogHTTP←G.INI.Get'LOGGING:LogHTTP'
 parms.LogConga←G.INI.Get'LOGGING:LogConga'
 parms.LogRumba←G.INI.Get'LOGGING:LogRumba'
⍝Done
